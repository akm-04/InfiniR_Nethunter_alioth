#!/sbin/sh

TMPDIR=/dev/tmp
MOUNTPATH=/dev/magisk_img

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $TMPDIR

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "***********************************"
  ui_print " Please install the latest Magisk! "
  ui_print "***********************************"
  exit 1
}

imageless_magisk() {
  [ "$MAGISK_VER_CODE" -gt 18100 ]
  return $?
}

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIPFILE=$3

# Ensure /data is mounted
mount /data 2>/dev/null || ui_print "- /data already mounted"

# Load utility functions
if [ -f /data/adb/magisk/util_functions.sh ]; then
  . /data/adb/magisk/util_functions.sh
  NVBASE=/data/adb
else
  require_new_magisk
fi

# Preparation for flashable zips
setup_flashable

# Mount partitions
mount_partitions

# Detect version and architecture
api_level_arch_detect

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files
unzip -oj "$ZIPFILE" module.prop install.sh uninstall.sh system.prop post-fs-data.sh service.sh -d $TMPDIR >&2

# Ensure install.sh exists before sourcing it
[ ! -f $TMPDIR/install.sh ] && abort "! Unable to extract zip file!"
# Load install script
. $TMPDIR/install.sh

# Determine module root path
if imageless_magisk; then
  MODDIRNAME=$([ "$BOOTMODE" = true ] && echo "modules_update" || echo "modules")
  MODULEROOT=$NVBASE/$MODDIRNAME
else
  IMGNAME=$([ "$BOOTMODE" = true ] && echo "magisk_merge.img" || echo "magisk.img")
  IMG=$NVBASE/$IMGNAME
  request_zip_size_check "$ZIPFILE"
  mount_magisk_img
  MODULEROOT=$MOUNTPATH
fi

# Fetch module ID from the module.prop
MODID=$(grep_prop id $TMPDIR/module.prop)
MODPATH=$MODULEROOT/$MODID

# Display module name
print_modname

ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

# Create module paths
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH

# Execute the on_install function
on_install

# Remove placeholder files
find $MODPATH/system -type f -name "placeholder" -exec rm -f {} \;

# Custom uninstaller script
[ -f $TMPDIR/uninstall.sh ] && cp -af $TMPDIR/uninstall.sh $MODPATH/uninstall.sh

# Auto Mount logic
if imageless_magisk; then
  $SKIPMOUNT && touch $MODPATH/skip_mount
else
  $SKIPMOUNT || touch $MODPATH/auto_mount
fi

# Handle system.prop file
[ "$PROPFILE" ] && cp -af $TMPDIR/system.prop $MODPATH/system.prop

# Copy module information
cp -af $TMPDIR/module.prop $MODPATH/module.prop

# Update info for Magisk Manager if in boot mode
if $BOOTMODE; then
  if imageless_magisk; then
    mktouch $NVBASE/modules/$MODID/update
    cp -af $TMPDIR/module.prop $NVBASE/modules/$MODID/module.prop
  else
    mktouch /sbin/.magisk/img/$MODID/update
    cp -af $TMPDIR/module.prop /sbin/.magisk/img/$MODID/module.prop
  fi
fi

# Handle post-fs-data script
[ "$POSTFSDATA" ] && cp -af $TMPDIR/post-fs-data.sh $MODPATH/post-fs-data.sh

# Handle service script
[ "$LATESTARTSERVICE" ] && cp -af $TMPDIR/service.sh $MODPATH/service.sh

# Process replace list folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

ui_print "- Setting permissions"
set_permissions

##########################################################################################
# Finalizing
##########################################################################################

cd /
# Unmount magisk image if needed
[ ! imageless_magisk ] && unmount_magisk_img

# Cleanup if not in boot mode
$BOOTMODE || recovery_cleanup

# Remove temporary directories
rm -rf $TMPDIR $MOUNTPATH

ui_print "- Done"
exit 0
